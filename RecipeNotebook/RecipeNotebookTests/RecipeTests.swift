//
//  RecipeTests.swift
//  RecipeNotebookTests
//
//  Created by –ò–ª—å—è—Å –ñ–∞–Ω–∞–µ–≤ on 20.03.2025.
//

import XCTest
@testable import RecipeNotebook // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å

class RecipeTests: XCTestCase {

    // MARK: - –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ JSON-—Ñ–∞–π–ª–∞

    func testReadJSONFileExists() {
        // Arrange
        let recipeListScreen = RecipeListScreen()

        // Act
        let recipes = recipeListScreen.readJSON()

        // Assert
        XCTAssertFalse(recipes.isEmpty, "JSON-—Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ.")
    }

    // MARK: - –¢–µ—Å—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON

    func testDecodeJSON() {
        // Arrange
        let recipeListScreen = RecipeListScreen()

        // Act
        let recipes = recipeListScreen.readJSON()

        // Assert
        XCTAssertEqual(recipes.count, 10, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 10 —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤ JSON-—Ñ–∞–π–ª–µ.")
        XCTAssertEqual(recipes[0].title, "Spaghetti Carbonara üáÆüáπ", "–ü–µ—Ä–≤—ã–π —Ä–µ—Ü–µ–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'Spaghetti Carbonara'.")
        XCTAssertEqual(recipes[1].title, "Sushi üáØüáµ", "–í—Ç–æ—Ä–æ–π —Ä–µ—Ü–µ–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'Sushi'.")
        XCTAssertEqual(recipes[2].title, "Paella üá™üá∏", "–¢—Ä–µ—Ç–∏–π —Ä–µ—Ü–µ–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'Paella'.")
    }

    // MARK: - –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö

    func testRecipeStructure() {
        // Arrange
        let recipeListScreen = RecipeListScreen()
        let recipes = recipeListScreen.readJSON()

        // Act
        let firstRecipe = recipes[0]

        // Assert
        XCTAssertEqual(firstRecipe.id, 1, "ID –ø–µ—Ä–≤–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1.")
        XCTAssertEqual(firstRecipe.image, "SpaghettiCarbonara", "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 'SpaghettiCarbonara'.")
        XCTAssertEqual(firstRecipe.description, "A classic Roman pasta dish made with eggs, cheese, pancetta, and black pepper.", "–û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º.")
        XCTAssertEqual(firstRecipe.steps.count, 5, "–ü–µ—Ä–≤—ã–π —Ä–µ—Ü–µ–ø—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 5 —à–∞–≥–æ–≤.")
    }

    // MARK: - –¢–µ—Å—Ç —à–∞–≥–æ–≤ —Ä–µ—Ü–µ–ø—Ç–∞

    func testRecipeSteps() {
        // Arrange
        let recipeListScreen = RecipeListScreen()
        let recipes = recipeListScreen.readJSON()
        let firstRecipeSteps = recipes[0].steps

        // Assert
        XCTAssertEqual(firstRecipeSteps[0].id, 1, "ID –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1.")
        XCTAssertEqual(firstRecipeSteps[0].description, "Cook spaghetti in salted boiling water.", "–û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º.")
        XCTAssertEqual(firstRecipeSteps[1].id, 2, "ID –≤—Ç–æ—Ä–æ–≥–æ —à–∞–≥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 2.")
        XCTAssertEqual(firstRecipeSteps[1].description, "Fry pancetta or guanciale until crispy.", "–û–ø–∏—Å–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —à–∞–≥–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º.")
    }

    // MARK: - –¢–µ—Å—Ç –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è JSON-—Ñ–∞–π–ª–∞

    func testReadJSONFileNotFound() {
        // Arrange
        let recipeListScreen = RecipeListScreen()

        // Act
        let recipes = recipeListScreen.readJSON()

        // Assert
        XCTAssertFalse(recipes.isEmpty, "–ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤.")
    }
}
